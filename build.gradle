plugins {
  id 'java'
  id 'application'
  id 'jacoco'
  id 'com.diffplug.spotless' version '8.0.0'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(25)
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = uri('https://gitlab.di.unimi.it/api/v4/projects/7715/packages/maven')
  }
}

configurations {
  umlDoclet
}

dependencies {
  testImplementation 'it.unimi.di.prog2:jubbiot:0.4a1'
  testImplementation 'org.junit.jupiter:junit-jupiter:6.0.0'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  umlDoclet 'nl.talsmasoftware:umldoclet:2.2.3'
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.compilerArgs += ['-Xlint:all', '-Werror']
}

tasks.withType(JavaExec).configureEach {
  systemProperty 'user.language', 'ROOT'
  systemProperty 'file.encoding', 'UTF-8'
  defaultCharacterEncoding = 'UTF-8'
  enableAssertions = !providers.gradleProperty('disableAssertions').isPresent()
}

tasks.named('test', Test) {
  systemProperty 'user.language', 'ROOT'
  systemProperty 'file.encoding', 'UTF-8'
  defaultCharacterEncoding = 'UTF-8'
  useJUnitPlatform()
  testLogging {
    events 'skipped', 'failed'
    afterSuite { desc, result ->
      if (!desc.parent) {
        println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
  finalizedBy jacocoTestReport
}

def defaultMain = 'it.unimi.di.prog2.h02.SalveMondo'

application {
  mainClass = providers.gradleProperty('mainClass').getOrElse(defaultMain)
}

tasks.named('javadoc', Javadoc) {
  options {
    description = 'Generates Javadoc API documentation and UML diagrams for the main source code.'
    encoding = 'UTF-8'
    charSet = 'UTF-8'
    links = [ 'https://docs.oracle.com/en/java/javase/25/docs/api/' ]
    docTitle = 'Handouts â€” Programmazione II @ UniMI'
    overview = 'src/overview.html'
    header = "<script type='text/javascript' src='https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script>"
    doclet = 'nl.talsmasoftware.umldoclet.UMLDoclet'
    docletpath = configurations.umlDoclet.files.asType(List)
    showFromPrivate()
    addBooleanOption('Xdoclint:all', true)
    addBooleanOption('Werror', true)
    addBooleanOption('-allow-script-in-comments', true)
  }
}

spotless {
  enforceCheck = false
  java {
    googleJavaFormat('1.28.0')
    removeUnusedImports()
    leadingTabsToSpaces(2)
    endWithNewline()
    licenseHeaderFile('src/licenseHeaderFile.txt')
  }
}

tasks.register('cleanActual', Delete) {
  delete fileTree('tests').matching {
    include '**/actual-*.txt'
  }
}

tasks.named('clean') {
  dependsOn cleanActual
}
